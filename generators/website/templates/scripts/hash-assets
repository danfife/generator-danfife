#!/usr/bin/env node

const ArgumentParser = require('argparse').ArgumentParser
const Version = require("node-version-assets")
const { getFiles } = require("../js/utils.js")
const _ = require("lodash")

// Setup arguments
const parser = new ArgumentParser({
  version: '0.0.1',
  addHelp: true,
  description: 'Assets'
})
parser.addArgument([ '-p', '--path' ], {
  help: 'the relative path from the cwd'
})
parser.addArgument([ '-u', '--cdnUrl' ], {
  help: 'the cdn url to append while rewriting files'
})
parser.addArgument([ '-s', '--silence' ], {
  help: 'silences output',
  action: 'storeTrue'
})
parser.addArgument([ '-f', '--hash' ], {
  help: 'the files to hash',
  nargs: '+',
  defaultValue: ["**/*.!(html)"]
})
parser.addArgument([ '-r', '--rewrite' ], {
  help: 'the files to rewrite matching files with their hashed filenames',
  nargs: '+',
  defaultValue: ["**/*.{css,html}"]
})

// Parse arguments
const {
	hash: hashedFileGlobs,
	rewrite: rewriteFileGlobs,
	path: relativePath,
	cdnUrl,
	silence
} = parser.parseArgs()

// Change working directory
if (relativePath) {
	process.chdir(`${process.cwd()}/${relativePath}`)
}

Promise.all([getFiles(hashedFileGlobs), getFiles(rewriteFileGlobs)]).then(data => {
	const [hashedFiles, rewriteFiles] = data,
		  	hashAndRewriteFiles = _.intersection(hashedFiles, rewriteFiles),
		  	hashOnlyFiles = _.difference(hashedFiles, hashAndRewriteFiles),
		  	rewriteOnlyFiles = _.difference(rewriteFiles, hashAndRewriteFiles)

	new Version({
		assets: hashOnlyFiles,
		grepFiles: rewriteFiles,
		cdnPath: cdnUrl,
		silence: silence
	}).run(function() {
		new Version({
			assets: hashAndRewriteFiles,
			grepFiles: rewriteOnlyFiles,
			cdnPath: cdnUrl,
			silence: silence
		}).run()	
	})
})


